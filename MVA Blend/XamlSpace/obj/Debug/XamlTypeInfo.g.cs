//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace XamlSpace
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::XamlSpace.XamlSpace_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace XamlSpace.XamlSpace_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[37];
            _typeNameTable[0] = "Shared.Common.BaseView";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "Shared.Common.BaseViewModel";
            _typeNameTable[4] = "Shared.Microsoft.BindableBase";
            _typeNameTable[5] = "Object";
            _typeNameTable[6] = "XamlSpace.ViewModels.DetailViewModel";
            _typeNameTable[7] = "Shared.SampleData.StarTrek.Character";
            _typeNameTable[8] = "Shared.Common.BaseModel";
            _typeNameTable[9] = "Shared.Common.DelegateCommand`1<System.Type>";
            _typeNameTable[10] = "Shared.Common.BaseViewModel.Orientations";
            _typeNameTable[11] = "System.Enum";
            _typeNameTable[12] = "System.ValueType";
            _typeNameTable[13] = "XamlSpace.Views.Detail";
            _typeNameTable[14] = "Shared.Converters.CollapsedWhenVertical";
            _typeNameTable[15] = "Shared.Converters.ReverseOrientationConverter";
            _typeNameTable[16] = "Shared.Converters.OrientationConverter";
            _typeNameTable[17] = "XamlSpace.ViewModels.MainPageViewModel";
            _typeNameTable[18] = "String";
            _typeNameTable[19] = "System.Collections.ObjectModel.ObservableCollection`1<Shared.SampleData.StarTrek.Character>";
            _typeNameTable[20] = "System.Collections.ObjectModel.Collection`1<Shared.SampleData.StarTrek.Character>";
            _typeNameTable[21] = "Int32";
            _typeNameTable[22] = "Shared.Common.DelegateCommand`1<Object>";
            _typeNameTable[23] = "Shared.Controls.AppBarHint";
            _typeNameTable[24] = "Windows.UI.Xaml.Controls.Button";
            _typeNameTable[25] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[26] = "Shared.Controls.MyGridView";
            _typeNameTable[27] = "Windows.UI.Xaml.Controls.GridView";
            _typeNameTable[28] = "Windows.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[29] = "XamlSpace.Views.MainPage";
            _typeNameTable[30] = "Shared.Common.BaseSplash";
            _typeNameTable[31] = "Windows.ApplicationModel.Activation.SplashScreen";
            _typeNameTable[32] = "System.Action";
            _typeNameTable[33] = "System.MulticastDelegate";
            _typeNameTable[34] = "System.Delegate";
            _typeNameTable[35] = "Windows.UI.Xaml.Controls.Image";
            _typeNameTable[36] = "XamlSpace.Views.Splash";

            _typeTable = new global::System.Type[37];
            _typeTable[0] = typeof(global::Shared.Common.BaseView);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::Shared.Common.BaseViewModel);
            _typeTable[4] = typeof(global::Shared.Microsoft.BindableBase);
            _typeTable[5] = typeof(global::System.Object);
            _typeTable[6] = typeof(global::XamlSpace.ViewModels.DetailViewModel);
            _typeTable[7] = typeof(global::Shared.SampleData.StarTrek.Character);
            _typeTable[8] = typeof(global::Shared.Common.BaseModel);
            _typeTable[9] = typeof(global::Shared.Common.DelegateCommand<global::System.Type>);
            _typeTable[10] = typeof(global::Shared.Common.BaseViewModel.Orientations);
            _typeTable[11] = typeof(global::System.Enum);
            _typeTable[12] = typeof(global::System.ValueType);
            _typeTable[13] = typeof(global::XamlSpace.Views.Detail);
            _typeTable[14] = typeof(global::Shared.Converters.CollapsedWhenVertical);
            _typeTable[15] = typeof(global::Shared.Converters.ReverseOrientationConverter);
            _typeTable[16] = typeof(global::Shared.Converters.OrientationConverter);
            _typeTable[17] = typeof(global::XamlSpace.ViewModels.MainPageViewModel);
            _typeTable[18] = typeof(global::System.String);
            _typeTable[19] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Shared.SampleData.StarTrek.Character>);
            _typeTable[20] = typeof(global::System.Collections.ObjectModel.Collection<global::Shared.SampleData.StarTrek.Character>);
            _typeTable[21] = typeof(global::System.Int32);
            _typeTable[22] = typeof(global::Shared.Common.DelegateCommand<global::System.Object>);
            _typeTable[23] = typeof(global::Shared.Controls.AppBarHint);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Controls.Button);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[26] = typeof(global::Shared.Controls.MyGridView);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.Controls.GridView);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Controls.ItemsControl);
            _typeTable[29] = typeof(global::XamlSpace.Views.MainPage);
            _typeTable[30] = typeof(global::Shared.Common.BaseSplash);
            _typeTable[31] = typeof(global::Windows.ApplicationModel.Activation.SplashScreen);
            _typeTable[32] = typeof(global::System.Action);
            _typeTable[33] = typeof(global::System.MulticastDelegate);
            _typeTable[34] = typeof(global::System.Delegate);
            _typeTable[35] = typeof(global::Windows.UI.Xaml.Controls.Image);
            _typeTable[36] = typeof(global::XamlSpace.Views.Splash);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_6_DetailViewModel() { return new global::XamlSpace.ViewModels.DetailViewModel(); }
        private object Activate_7_Character() { return new global::Shared.SampleData.StarTrek.Character(); }
        private object Activate_13_Detail() { return new global::XamlSpace.Views.Detail(); }
        private object Activate_14_CollapsedWhenVertical() { return new global::Shared.Converters.CollapsedWhenVertical(); }
        private object Activate_15_ReverseOrientationConverter() { return new global::Shared.Converters.ReverseOrientationConverter(); }
        private object Activate_16_OrientationConverter() { return new global::Shared.Converters.OrientationConverter(); }
        private object Activate_17_MainPageViewModel() { return new global::XamlSpace.ViewModels.MainPageViewModel(); }
        private object Activate_19_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Shared.SampleData.StarTrek.Character>(); }
        private object Activate_20_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Shared.SampleData.StarTrek.Character>(); }
        private object Activate_23_AppBarHint() { return new global::Shared.Controls.AppBarHint(); }
        private object Activate_26_MyGridView() { return new global::Shared.Controls.MyGridView(); }
        private object Activate_29_MainPage() { return new global::XamlSpace.Views.MainPage(); }
        private object Activate_36_Splash() { return new global::XamlSpace.Views.Splash(); }
        private void VectorAdd_19_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Shared.SampleData.StarTrek.Character>)instance;
            var newItem = (global::Shared.SampleData.StarTrek.Character)item;
            collection.Add(newItem);
        }
        private void VectorAdd_20_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Shared.SampleData.StarTrek.Character>)instance;
            var newItem = (global::Shared.SampleData.StarTrek.Character)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::XamlSpace.XamlSpace_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Shared.Common.BaseView
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.AddMemberName("ViewModel");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Shared.Common.BaseViewModel
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Shared.Microsoft.BindableBase"));
                userType.AddMemberName("GoBackCommand");
                userType.AddMemberName("Orientation");
                xamlType = userType;
                break;

            case 4:   //  Shared.Microsoft.BindableBase
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 5:   //  Object
                xamlType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  XamlSpace.ViewModels.DetailViewModel
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Shared.Common.BaseViewModel"));
                userType.Activator = Activate_6_DetailViewModel;
                userType.AddMemberName("Character");
                xamlType = userType;
                break;

            case 7:   //  Shared.SampleData.StarTrek.Character
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Shared.Common.BaseModel"));
                userType.Activator = Activate_7_Character;
                userType.AddMemberName("Name");
                userType.AddMemberName("Actor");
                userType.AddMemberName("Photo");
                xamlType = userType;
                break;

            case 8:   //  Shared.Common.BaseModel
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Shared.Microsoft.BindableBase"));
                userType.AddMemberName("Index");
                userType.AddMemberName("ColSpan");
                userType.AddMemberName("RowSpan");
                xamlType = userType;
                break;

            case 9:   //  Shared.Common.DelegateCommand`1<System.Type>
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 10:   //  Shared.Common.BaseViewModel.Orientations
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Horizontal", global::Shared.Common.BaseViewModel.Orientations.Horizontal);
                userType.AddEnumValue("Vertical", global::Shared.Common.BaseViewModel.Orientations.Vertical);
                userType.AddEnumValue("Snap", global::Shared.Common.BaseViewModel.Orientations.Snap);
                xamlType = userType;
                break;

            case 11:   //  System.Enum
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 12:   //  System.ValueType
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 13:   //  XamlSpace.Views.Detail
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Shared.Common.BaseView"));
                userType.Activator = Activate_13_Detail;
                xamlType = userType;
                break;

            case 14:   //  Shared.Converters.CollapsedWhenVertical
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_14_CollapsedWhenVertical;
                xamlType = userType;
                break;

            case 15:   //  Shared.Converters.ReverseOrientationConverter
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_15_ReverseOrientationConverter;
                xamlType = userType;
                break;

            case 16:   //  Shared.Converters.OrientationConverter
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_16_OrientationConverter;
                xamlType = userType;
                break;

            case 17:   //  XamlSpace.ViewModels.MainPageViewModel
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Shared.Common.BaseViewModel"));
                userType.Activator = Activate_17_MainPageViewModel;
                userType.AddMemberName("Title");
                userType.AddMemberName("EntCharacters");
                userType.AddMemberName("TngCharacters");
                userType.AddMemberName("TosCharacters");
                userType.AddMemberName("SelectedCharacter");
                userType.AddMemberName("SetupCommand");
                userType.AddMemberName("TosMax");
                userType.AddMemberName("TngMax");
                userType.AddMemberName("EntMax");
                xamlType = userType;
                break;

            case 18:   //  String
                xamlType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  System.Collections.ObjectModel.ObservableCollection`1<Shared.SampleData.StarTrek.Character>
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Shared.SampleData.StarTrek.Character>"));
                userType.CollectionAdd = VectorAdd_19_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  System.Collections.ObjectModel.Collection`1<Shared.SampleData.StarTrek.Character>
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_20_Collection;
                userType.CollectionAdd = VectorAdd_20_Collection;
                xamlType = userType;
                break;

            case 21:   //  Int32
                xamlType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Shared.Common.DelegateCommand`1<Object>
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  Shared.Controls.AppBarHint
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_23_AppBarHint;
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Xaml.Controls.Button
                xamlType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Shared.Controls.MyGridView
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.GridView"));
                userType.Activator = Activate_26_MyGridView;
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.Controls.GridView
                xamlType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Windows.UI.Xaml.Controls.ItemsControl
                xamlType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  XamlSpace.Views.MainPage
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Shared.Common.BaseView"));
                userType.Activator = Activate_29_MainPage;
                xamlType = userType;
                break;

            case 30:   //  Shared.Common.BaseSplash
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.AddMemberName("SplashScreen");
                userType.AddMemberName("Navigate");
                userType.AddMemberName("SplashImage");
                xamlType = userType;
                break;

            case 31:   //  Windows.ApplicationModel.Activation.SplashScreen
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  System.Action
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  System.MulticastDelegate
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 34:   //  System.Delegate
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 35:   //  Windows.UI.Xaml.Controls.Image
                xamlType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 36:   //  XamlSpace.Views.Splash
                userType = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Shared.Common.BaseSplash"));
                userType.Activator = Activate_36_Splash;
                userType.AddMemberName("SplashImage");
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Shared.Shared_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_BaseView_ViewModel(object instance)
        {
            var that = (global::Shared.Common.BaseView)instance;
            return that.ViewModel;
        }
        private object get_1_DetailViewModel_Character(object instance)
        {
            var that = (global::XamlSpace.ViewModels.DetailViewModel)instance;
            return that.Character;
        }
        private void set_1_DetailViewModel_Character(object instance, object Value)
        {
            var that = (global::XamlSpace.ViewModels.DetailViewModel)instance;
            that.Character = (global::Shared.SampleData.StarTrek.Character)Value;
        }
        private object get_2_BaseViewModel_GoBackCommand(object instance)
        {
            var that = (global::Shared.Common.BaseViewModel)instance;
            return that.GoBackCommand;
        }
        private object get_3_BaseViewModel_Orientation(object instance)
        {
            var that = (global::Shared.Common.BaseViewModel)instance;
            return that.Orientation;
        }
        private void set_3_BaseViewModel_Orientation(object instance, object Value)
        {
            var that = (global::Shared.Common.BaseViewModel)instance;
            that.Orientation = (global::Shared.Common.BaseViewModel.Orientations)Value;
        }
        private object get_4_MainPageViewModel_Title(object instance)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            return that.Title;
        }
        private void set_4_MainPageViewModel_Title(object instance, object Value)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_5_MainPageViewModel_EntCharacters(object instance)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            return that.EntCharacters;
        }
        private object get_6_Character_Name(object instance)
        {
            var that = (global::Shared.SampleData.StarTrek.Character)instance;
            return that.Name;
        }
        private void set_6_Character_Name(object instance, object Value)
        {
            var that = (global::Shared.SampleData.StarTrek.Character)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_7_Character_Actor(object instance)
        {
            var that = (global::Shared.SampleData.StarTrek.Character)instance;
            return that.Actor;
        }
        private void set_7_Character_Actor(object instance, object Value)
        {
            var that = (global::Shared.SampleData.StarTrek.Character)instance;
            that.Actor = (global::System.String)Value;
        }
        private object get_8_Character_Photo(object instance)
        {
            var that = (global::Shared.SampleData.StarTrek.Character)instance;
            return that.Photo;
        }
        private void set_8_Character_Photo(object instance, object Value)
        {
            var that = (global::Shared.SampleData.StarTrek.Character)instance;
            that.Photo = (global::System.String)Value;
        }
        private object get_9_BaseModel_Index(object instance)
        {
            var that = (global::Shared.Common.BaseModel)instance;
            return that.Index;
        }
        private void set_9_BaseModel_Index(object instance, object Value)
        {
            var that = (global::Shared.Common.BaseModel)instance;
            that.Index = (global::System.Int32)Value;
        }
        private object get_10_BaseModel_ColSpan(object instance)
        {
            var that = (global::Shared.Common.BaseModel)instance;
            return that.ColSpan;
        }
        private void set_10_BaseModel_ColSpan(object instance, object Value)
        {
            var that = (global::Shared.Common.BaseModel)instance;
            that.ColSpan = (global::System.Int32)Value;
        }
        private object get_11_BaseModel_RowSpan(object instance)
        {
            var that = (global::Shared.Common.BaseModel)instance;
            return that.RowSpan;
        }
        private void set_11_BaseModel_RowSpan(object instance, object Value)
        {
            var that = (global::Shared.Common.BaseModel)instance;
            that.RowSpan = (global::System.Int32)Value;
        }
        private object get_12_MainPageViewModel_TngCharacters(object instance)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            return that.TngCharacters;
        }
        private object get_13_MainPageViewModel_TosCharacters(object instance)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            return that.TosCharacters;
        }
        private object get_14_MainPageViewModel_SelectedCharacter(object instance)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            return that.SelectedCharacter;
        }
        private void set_14_MainPageViewModel_SelectedCharacter(object instance, object Value)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            that.SelectedCharacter = (global::Shared.SampleData.StarTrek.Character)Value;
        }
        private object get_15_MainPageViewModel_SetupCommand(object instance)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            return that.SetupCommand;
        }
        private object get_16_MainPageViewModel_TosMax(object instance)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            return that.TosMax;
        }
        private void set_16_MainPageViewModel_TosMax(object instance, object Value)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            that.TosMax = (global::System.Int32)Value;
        }
        private object get_17_MainPageViewModel_TngMax(object instance)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            return that.TngMax;
        }
        private void set_17_MainPageViewModel_TngMax(object instance, object Value)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            that.TngMax = (global::System.Int32)Value;
        }
        private object get_18_MainPageViewModel_EntMax(object instance)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            return that.EntMax;
        }
        private void set_18_MainPageViewModel_EntMax(object instance, object Value)
        {
            var that = (global::XamlSpace.ViewModels.MainPageViewModel)instance;
            that.EntMax = (global::System.Int32)Value;
        }
        private object get_19_BaseSplash_SplashScreen(object instance)
        {
            var that = (global::Shared.Common.BaseSplash)instance;
            return that.SplashScreen;
        }
        private void set_19_BaseSplash_SplashScreen(object instance, object Value)
        {
            var that = (global::Shared.Common.BaseSplash)instance;
            that.SplashScreen = (global::Windows.ApplicationModel.Activation.SplashScreen)Value;
        }
        private object get_20_BaseSplash_Navigate(object instance)
        {
            var that = (global::Shared.Common.BaseSplash)instance;
            return that.Navigate;
        }
        private void set_20_BaseSplash_Navigate(object instance, object Value)
        {
            var that = (global::Shared.Common.BaseSplash)instance;
            that.Navigate = (global::System.Action)Value;
        }
        private object get_21_BaseSplash_SplashImage(object instance)
        {
            var that = (global::Shared.Common.BaseSplash)instance;
            return that.SplashImage;
        }
        private object get_22_Splash_SplashImage(object instance)
        {
            var that = (global::XamlSpace.Views.Splash)instance;
            return that.SplashImage;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember xamlMember = null;
            global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Shared.Common.BaseView.ViewModel":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shared.Common.BaseView");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "ViewModel", "Shared.Common.BaseViewModel");
                xamlMember.Getter = get_0_BaseView_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "XamlSpace.ViewModels.DetailViewModel.Character":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlSpace.ViewModels.DetailViewModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "Character", "Shared.SampleData.StarTrek.Character");
                xamlMember.Getter = get_1_DetailViewModel_Character;
                xamlMember.Setter = set_1_DetailViewModel_Character;
                break;
            case "Shared.Common.BaseViewModel.GoBackCommand":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shared.Common.BaseViewModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "GoBackCommand", "Shared.Common.DelegateCommand`1<System.Type>");
                xamlMember.Getter = get_2_BaseViewModel_GoBackCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Shared.Common.BaseViewModel.Orientation":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shared.Common.BaseViewModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "Orientation", "Shared.Common.BaseViewModel.Orientations");
                xamlMember.Getter = get_3_BaseViewModel_Orientation;
                xamlMember.Setter = set_3_BaseViewModel_Orientation;
                break;
            case "XamlSpace.ViewModels.MainPageViewModel.Title":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlSpace.ViewModels.MainPageViewModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_4_MainPageViewModel_Title;
                xamlMember.Setter = set_4_MainPageViewModel_Title;
                break;
            case "XamlSpace.ViewModels.MainPageViewModel.EntCharacters":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlSpace.ViewModels.MainPageViewModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "EntCharacters", "System.Collections.ObjectModel.ObservableCollection`1<Shared.SampleData.StarTrek.Character>");
                xamlMember.Getter = get_5_MainPageViewModel_EntCharacters;
                xamlMember.SetIsReadOnly();
                break;
            case "Shared.SampleData.StarTrek.Character.Name":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shared.SampleData.StarTrek.Character");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_6_Character_Name;
                xamlMember.Setter = set_6_Character_Name;
                break;
            case "Shared.SampleData.StarTrek.Character.Actor":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shared.SampleData.StarTrek.Character");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "Actor", "String");
                xamlMember.Getter = get_7_Character_Actor;
                xamlMember.Setter = set_7_Character_Actor;
                break;
            case "Shared.SampleData.StarTrek.Character.Photo":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shared.SampleData.StarTrek.Character");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "Photo", "String");
                xamlMember.Getter = get_8_Character_Photo;
                xamlMember.Setter = set_8_Character_Photo;
                break;
            case "Shared.Common.BaseModel.Index":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shared.Common.BaseModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "Index", "Int32");
                xamlMember.Getter = get_9_BaseModel_Index;
                xamlMember.Setter = set_9_BaseModel_Index;
                break;
            case "Shared.Common.BaseModel.ColSpan":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shared.Common.BaseModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "ColSpan", "Int32");
                xamlMember.Getter = get_10_BaseModel_ColSpan;
                xamlMember.Setter = set_10_BaseModel_ColSpan;
                break;
            case "Shared.Common.BaseModel.RowSpan":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shared.Common.BaseModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "RowSpan", "Int32");
                xamlMember.Getter = get_11_BaseModel_RowSpan;
                xamlMember.Setter = set_11_BaseModel_RowSpan;
                break;
            case "XamlSpace.ViewModels.MainPageViewModel.TngCharacters":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlSpace.ViewModels.MainPageViewModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "TngCharacters", "System.Collections.ObjectModel.ObservableCollection`1<Shared.SampleData.StarTrek.Character>");
                xamlMember.Getter = get_12_MainPageViewModel_TngCharacters;
                xamlMember.SetIsReadOnly();
                break;
            case "XamlSpace.ViewModels.MainPageViewModel.TosCharacters":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlSpace.ViewModels.MainPageViewModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "TosCharacters", "System.Collections.ObjectModel.ObservableCollection`1<Shared.SampleData.StarTrek.Character>");
                xamlMember.Getter = get_13_MainPageViewModel_TosCharacters;
                xamlMember.SetIsReadOnly();
                break;
            case "XamlSpace.ViewModels.MainPageViewModel.SelectedCharacter":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlSpace.ViewModels.MainPageViewModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "SelectedCharacter", "Shared.SampleData.StarTrek.Character");
                xamlMember.Getter = get_14_MainPageViewModel_SelectedCharacter;
                xamlMember.Setter = set_14_MainPageViewModel_SelectedCharacter;
                break;
            case "XamlSpace.ViewModels.MainPageViewModel.SetupCommand":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlSpace.ViewModels.MainPageViewModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "SetupCommand", "Shared.Common.DelegateCommand`1<Object>");
                xamlMember.Getter = get_15_MainPageViewModel_SetupCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "XamlSpace.ViewModels.MainPageViewModel.TosMax":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlSpace.ViewModels.MainPageViewModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "TosMax", "Int32");
                xamlMember.Getter = get_16_MainPageViewModel_TosMax;
                xamlMember.Setter = set_16_MainPageViewModel_TosMax;
                break;
            case "XamlSpace.ViewModels.MainPageViewModel.TngMax":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlSpace.ViewModels.MainPageViewModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "TngMax", "Int32");
                xamlMember.Getter = get_17_MainPageViewModel_TngMax;
                xamlMember.Setter = set_17_MainPageViewModel_TngMax;
                break;
            case "XamlSpace.ViewModels.MainPageViewModel.EntMax":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlSpace.ViewModels.MainPageViewModel");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "EntMax", "Int32");
                xamlMember.Getter = get_18_MainPageViewModel_EntMax;
                xamlMember.Setter = set_18_MainPageViewModel_EntMax;
                break;
            case "Shared.Common.BaseSplash.SplashScreen":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shared.Common.BaseSplash");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "SplashScreen", "Windows.ApplicationModel.Activation.SplashScreen");
                xamlMember.Getter = get_19_BaseSplash_SplashScreen;
                xamlMember.Setter = set_19_BaseSplash_SplashScreen;
                break;
            case "Shared.Common.BaseSplash.Navigate":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shared.Common.BaseSplash");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "Navigate", "System.Action");
                xamlMember.Getter = get_20_BaseSplash_Navigate;
                xamlMember.Setter = set_20_BaseSplash_Navigate;
                break;
            case "Shared.Common.BaseSplash.SplashImage":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Shared.Common.BaseSplash");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "SplashImage", "Windows.UI.Xaml.Controls.Image");
                xamlMember.Getter = get_21_BaseSplash_SplashImage;
                xamlMember.SetIsReadOnly();
                break;
            case "XamlSpace.Views.Splash.SplashImage":
                userType = (global::XamlSpace.XamlSpace_XamlTypeInfo.XamlUserType)GetXamlTypeByName("XamlSpace.Views.Splash");
                xamlMember = new global::XamlSpace.XamlSpace_XamlTypeInfo.XamlMember(this, "SplashImage", "Windows.UI.Xaml.Controls.Image");
                xamlMember.Getter = get_22_Splash_SplashImage;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::XamlSpace.XamlSpace_XamlTypeInfo.XamlSystemBaseType
    {
        global::XamlSpace.XamlSpace_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::XamlSpace.XamlSpace_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::XamlSpace.XamlSpace_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::XamlSpace.XamlSpace_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


